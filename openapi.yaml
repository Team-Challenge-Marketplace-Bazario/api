openapi: 3.0.0
info:
  title: Bazario API specification
  version: '0.1'

servers:
  - url: https://backend-url/api/

tags:
  - name: auth
    description: Endpoints to work with authentication
    
  - name: user
    description: Endpoints to work with user
    
  - name: advertisement
    description: Endpoints to work with user's advertisnments
    
  - name: fav
    description: Endpoints to work with user's favourite advertisnments
    
  - name: comment
    description: Endpoints to work with advertisnments' comments
    

paths:
  /auth/login:
    post:
      tags:
        - auth
      description: login to aplication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
        
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        404:
          description: User not found
          
        400:
          description: If password not valid or other error
          
  /auth/register:
    post:
      tags: 
        - auth
      description: register new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - phone
                - email
                - password
              properties:
                firstName:
                  type: string
                  minLength: 2
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 2
                  maxLength: 50
                phone:
                  type: string
                  maxLength: 13
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Successful operation
        400:
          description: some fields are invalid
        409:
          description: user already registered
          
  /user:
    get:
      tags:
        - user
      description: get information about authorized user
      operationId: getUserInfo
      security:
        - jwt: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: unauthorized request
          
    put:
      tags:
        - user
      description: update information about authorized user
      operationId: updateUserInfo
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - phone
                - email
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: '+380991234567'
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: some fields are invalid
        
        403:
          description: unauthorized request
        
  /adv:
    get:
      tags:
        - advertisement
      description: get all active advertistment
      operationId: getAllAdvertistment
      parameters:
        - in: query
          name: title
          schema:
            type: string
          example: 'abc'
        
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example: 'sort=price&sort=asc&sort=date&sort=desc'
        
        - in: query
          name: page
          schema:
            type: integer
          example: 2
        
        - in: query
          name: ipp
          description: items per page
          schema:
            type: integer
          example: 20
          
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema: 
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Advertisement'
                  page:
                    type: integer
                    example: 0
                  pages:
                    type: integer
                    example: 20
                  size:
                    type: integer
                    example: 50
                    description: elements per page
        400:
          description: some parameters are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: string
                    example: []
                  page: 
                    type: integer
                    example: 0
                  pages:
                    type: integer
                    example: 0
                  size:
                    type: integer
                    example: 0
  
    post:
      tags:
        - advertisement
      description: add advertistment
      operationId: addAdvertistment
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price
              properties:
               
                title:
                  type: string
                  example: Adv Title
               
                description:
                  type: string
                  example: Adv Description
                
                price:
                  type: string
                  example: '123.45'
                  
                photos:
                  type: array
                  items:
                    type: string
                    format: byte
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Advertisement'
        
        400:
          description: some fields are invalid
        
        403:
          description: unauthorized request
  
  /adv/{adv_id}:
    parameters:
      - name: adv_id
        in: path
        description: ID of advertistment
        required: true
        schema:
          type: integer
    
    get:
      tags:
        - advertisement
      description: get advertistment by id
      operationId: getAdvertistmentById
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Advertisement'
        404:
          description: advertistment not found
    
    put:
      tags: 
        - advertisement
      description: update advertistment by id
      operationId: updateAdvertistmentById
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price
              properties:
               
                title:
                  type: string
                  example: Adv Title
               
                description:
                  type: string
                  example: Adv Description
                
                price:
                  type: string
                  example: '123.45'
                  
                status:
                  type: boolean
                  example: true
      
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Advertisement'
        400:
          description: some fields are invalid
        
        403:
          description: unauthorized request
       
        404:
          description: advertistment not found
        
    delete:
      tags: 
        - advertisement
      description: delete advertistment by id
      operationId: deleteAdvertistmentById
      security:
        - jwt: []
      responses:
        200: 
          description: Successful operation
       
        403:
          description: unauthorized request
       
        404:
          description: advertistment not found
          
  /fav:
    get:
      tags:
        - fav
      description: get all user's favourite advertistment
      operationId: getAllFavourites
      security:
        - jwt: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Advertisement'
        403:
          description: unauthorized request
  
  /fav/{adv_id}:
    parameters:
      - name: adv_id
        in: path
        description: ID of advertistment
        required: true
        schema:
          type: integer
          
    post:
      tags:
        - fav
      description: add adv to favorite list
      operationId: addFavourite
      security:
        - jwt: []
      responses:
        200:
          description: Successful operation
       
        403:
          description: unauthorized request
     
        404:
          description: advertistment not found
          
    delete:
      tags:
        - fav
      description: delete adv from user's favorite list
      operationId: deleteFavourite
      security:
        - jwt: []
      responses:
        200:
          description: Successful operation
       
        403:
          description: unauthorized request
     
        404:
          description: advertistment not found
          
  /comment/{adv_id}:
    parameters:
      - name: adv_id
        in: path
        description: ID of advertistment
        required: true
        schema:
          type: integer
          
    get:
      tags:
        - comment
      description: get all comments for adv
      operationId: getAllComments
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Comment'
        404:
          description: comment not found
    
    post:
      tags:
        - comment
      description: add comment
      operationId: addComment
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  example: comment description
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Comment'
        403:
          description: unauthorized request
        
        404:
          description: comment not found
        
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phone:
          type: string
          example: '+380991234567'
        email:
          type: string
          format: email
    
    Advertisement:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        
        title:
          type: string
          example: 'Advertisement Title'
        
        description:
          type: string
          example: Description
        
        pictures:
          type: array
          items:
            type: string
          example: '[url1, url2, ...]'
        
        price:
          type: string
          example: '123.45'
          
        status:
          type: boolean
          example: true
          description: true if visible by everyone, false otherwise 
          
        create_date: 
          type: string
          format: date-time
    
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        description:
          type: string
          example: description
        create_date:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
          
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
